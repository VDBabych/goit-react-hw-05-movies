{"version":3,"file":"static/js/145.4feb72ad.chunk.js","mappings":"oMAEaA,EAAW,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAOG,KAAI,SAAAC,GAAE,OACZ,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAGE,IAAMC,MAAO,CAAEC,KAAMP,GAA7C,SACGG,EAAGK,SAFCL,EAAGE,GADA,KASnB,C,qICbYI,EAAa,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,eAOzC,OACE,kBAAMC,SAPa,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAaF,EAAEG,OAAOC,SAASC,MAAMC,MAAMC,OAC5CL,GACLL,EAAaK,EACd,EAE+BM,UAAU,aAAxC,WACE,oBAAQC,KAAK,SAASD,UAAU,oBAAhC,WACE,SAAC,MAAD,CAAaE,KAAM,MACnB,iBAAMF,UAAU,0BAAhB,wBAGF,kBACEG,aAAcb,EACdc,KAAK,QACLJ,UAAU,mBACVC,KAAK,OACLI,aAAa,MACbC,WAAS,EACTC,YAAY,mBAInB,E,mCCpBYC,EAAS,WACpB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOlC,EAAP,KAAemC,EAAf,KACMhB,EAAQa,EAAaI,IAAI,UAC/BC,EAAAA,EAAAA,YAAU,WACR,GAAKlB,EAAL,CACA,IAAMmB,EAAY,mCAAG,8GAEEC,EAAAA,EAAAA,IAAiBpB,GAFnB,OAEXqB,EAFW,OAGjBL,EAAUK,EAAKC,SAHE,gDAKjBC,QAAQC,IAAI,KAAMC,SALD,yDAAH,qDAQlBN,GATkB,CAUnB,GAAE,CAACnB,IAIJ,OACE,iCACE,SAACT,EAAD,CAAYC,aALK,SAAAS,GACnBa,EAAgB,CAAEd,MAAOC,GAC1B,EAG2CR,eAAgBO,KACxD,SAACpB,EAAA,EAAD,CAAUC,OAAQA,KAClB,SAAC,KAAD,MAGL,C,+LC/BY6C,EAAiB,mCAAG,sGACRC,EAAAA,EAAAA,IAAU,kDAAmD,CAC9EC,OAAQ,CACJC,QAAS,sCAHY,uBACtBR,EADsB,EACtBA,KADsB,kBAMtBA,GANsB,2CAAH,qDASjBD,EAAgB,mCAAG,WAAOpB,GAAP,yFACP2B,EAAAA,EAAAA,IAAU,4CAA6C,CACxEC,OAAQ,CACJC,QAAS,mCACTC,SAAU,QACVC,KAAM,EACNC,eAAe,EACfhC,MAAAA,KAPoB,uBACrBqB,EADqB,EACrBA,KADqB,kBAUrBA,GAVqB,2CAAH,sDAahBY,EAAY,mCAAG,WAAOC,GAAP,yFACHP,EAAAA,EAAAA,IAAA,6CAAgDO,GAAW,CAC5EN,OAAQ,CACJC,QAAS,mCACTC,SAAU,WAJM,uBACjBT,EADiB,EACjBA,KADiB,kBAOjBA,GAPiB,2CAAH,sDAUZc,EAAW,mCAAG,WAAMD,GAAN,yFACFP,EAAAA,EAAAA,IAAA,6CAAgDO,EAAhD,YAAmE,CACpFN,OAAQ,CACJC,QAAS,mCACTC,SAAU,WAJK,uBAChBT,EADgB,EAChBA,KADgB,kBAOhBA,GAPgB,2CAAH,sDAUXe,EAAc,mCAAG,WAAMF,GAAN,yFACHP,EAAAA,EAAAA,IAAA,6CAAgDO,EAAhD,YAAmE,CACtFN,OAAQ,CACJC,QAAS,mCACTC,SAAU,QACVC,KAAM,KALY,uBAClBV,EADkB,EAClBA,KADkB,kBAQnBA,GARmB,2CAAH,qD","sources":["components/FilmList/FilmList.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","services/apiRequests.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nexport const FilmList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(el => (\n        <li key={el.id}>\n          <Link to={`/movies/${el.id}`} state={{ from: location }}>\n            {el.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { BiSearchAlt } from 'react-icons/bi';\n\nexport const SearchForm = ({ submitAction, startInputText }) => {\n  const onFormSubmit = e => {\n    e.preventDefault();\n    const inputValue = e.target.elements.query.value.trim();\n    if (!inputValue) return;\n    submitAction(inputValue);\n  };\n  return (\n    <form onSubmit={onFormSubmit} className=\"SearchForm\">\n      <button type=\"submit\" className=\"SearchForm-button\">\n        <BiSearchAlt size={15} />\n        <span className=\"SearchForm-button-label\">Search</span>\n      </button>\n\n      <input\n        defaultValue={startInputText}\n        name=\"query\"\n        className=\"SearchForm-input\"\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search films\"\n      />\n    </form>\n  );\n};\n","import { FilmList } from 'components/FilmList/FilmList';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Outlet, useSearchParams } from 'react-router-dom';\nimport { getMoviesByQuery } from 'services/apiRequests';\n\nexport const Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const query = searchParams.get('query');\n  useEffect(() => {\n    if (!query) return;\n    const effectAction = async () => {\n      try {\n        const data = await getMoviesByQuery(query);\n        setMovies(data.results);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    effectAction();\n  }, [query]);\n  const submitAction = value => {\n    setSearchParams({ query: value });\n  };\n  return (\n    <>\n      <SearchForm submitAction={submitAction} startInputText={query} />\n      <FilmList movies={movies} />\n      <Outlet />\n    </>\n  );\n};\n","import axios from \"axios\"\n\nexport const getTrendingMovies = async () => {\n    const {data} = await axios.get('https://api.themoviedb.org/3/trending/movie/day', {\n        params: {\n            api_key: '9cda16d98a6e510af2decf0d66e8e7d5'\n        }\n    })\n    return data\n}\n\nexport const getMoviesByQuery = async (query) => {\n    const {data} = await axios.get('https://api.themoviedb.org/3/search/movie', {\n        params: {\n            api_key: '9cda16d98a6e510af2decf0d66e8e7d5',\n            language: 'en-US',\n            page: 1,\n            include_adult: false,\n            query\n        }\n    })\n    return data\n}\n\nexport const getMovieById = async (movieId) => {\n    const {data} = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}`, {\n        params: {\n            api_key: '9cda16d98a6e510af2decf0d66e8e7d5',\n            language: 'en-US',\n        }\n    })\n    return data\n}\n\nexport const getCastById = async(movieId) => {\n    const {data} = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits`, {\n        params: {\n            api_key: '9cda16d98a6e510af2decf0d66e8e7d5',\n            language: 'en-US',\n        }\n    })\n    return data\n}\n\nexport const getReviewsById = async(movieId) => {\n    const { data } = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews`, {\n        params: {\n            api_key: '9cda16d98a6e510af2decf0d66e8e7d5',\n            language: 'en-US',\n            page: 1\n        }\n    })\n    return data\n}"],"names":["FilmList","movies","location","useLocation","map","el","to","id","state","from","title","SearchForm","submitAction","startInputText","onSubmit","e","preventDefault","inputValue","target","elements","query","value","trim","className","type","size","defaultValue","name","autoComplete","autoFocus","placeholder","Movies","useSearchParams","searchParams","setSearchParams","useState","setMovies","get","useEffect","effectAction","getMoviesByQuery","data","results","console","log","message","getTrendingMovies","axios","params","api_key","language","page","include_adult","getMovieById","movieId","getCastById","getReviewsById"],"sourceRoot":""}